diff --git a/drivers/media/i2c/imx219.c b/drivers/media/i2c/imx219.c
index a59f301c6533..9eff64546f5e 100644
--- a/drivers/media/i2c/imx219.c
+++ b/drivers/media/i2c/imx219.c
@@ -49,6 +49,34 @@
 #define IMX219_NAME			"imx219"
 #define IMX219_LANES  			2
 
+/*
+ * Initialisation delay between XCLR low->high and the moment when the sensor
+ * can start capture (i.e. can leave software stanby) must be not less than:
+ *   t4 + max(t5, t6 + <time to initialize the sensor register over I2C>)
+ * where
+ *   t4 is fixed, and is max 200uS,
+ *   t5 is fixed, and is 6000uS,
+ *   t6 depends on the sensor external clock, and is max 32000 clock periods.
+ * As per sensor datasheet, the external clock must be from 6MHz to 27MHz.
+ * So for any acceptable external clock t6 is always within the range of
+ * 1185 to 5333 uS, and is always less than t5.
+ * For this reason this is always safe to wait (t4 + t5) = 6200 uS, then
+ * initialize the sensor over I2C, and then exit the software standby.
+ *
+ * This start-up time can be optimized a bit more, if we start the writes
+ * over I2C after (t4+t6), but before (t4+t5) expires. But then sensor
+ * initialization over I2C may complete before (t4+t5) expires, and we must
+ * ensure that capture is not started before (t4+t5).
+ *
+ * This delay doesn't account for the power supply startup time. If needed,
+ * this should be taken care of via the regulator framework. E.g. in the
+ * case of DT for regulator-fixed one should define the startup-delay-us
+ * property.
+ */
+#define IMX219_XCLR_MIN_DELAY_US       6200
+#define IMX219_XCLR_DELAY_RANGE_US     1000
+#define IMX219_PWDN_ACTIVE_DELAY_MS	500
+
 static const s64 link_freq_menu_items[] = {
 	456000000,
 };
@@ -224,6 +252,8 @@ struct imx219 {
 	struct media_pad pad;
 	struct v4l2_ctrl_handler ctrl_handler;
 	struct clk *clk;
+	struct gpio_desc *power_gpio;
+	struct gpio_desc *reset_gpio;
 	struct v4l2_rect crop_rect;
 	int hflip;
 	int vflip;
@@ -429,10 +459,17 @@ static int imx219_s_power(struct v4l2_subdev *sd, int on)
 	struct imx219 *priv = to_imx219(client);
 
 	if (on)	{
-		dev_dbg(&client->dev, "imx219 power on\n");
+		dev_info(&client->dev, "imx219 power on\n");
 		clk_prepare_enable(priv->clk);
+		if (priv->reset_gpio) {
+			gpiod_set_value_cansleep(priv->reset_gpio, 0);
+			usleep_range(IMX219_XCLR_MIN_DELAY_US,
+				     IMX219_XCLR_MIN_DELAY_US + IMX219_XCLR_DELAY_RANGE_US);
+		}
 	} else if (!on) {
-		dev_dbg(&client->dev, "imx219 power off\n");
+		dev_info(&client->dev, "imx219 power off\n");
+		if (priv->reset_gpio)
+			gpiod_set_value_cansleep(priv->reset_gpio, 1);
 		clk_disable_unprepare(priv->clk);
 	}
 
@@ -1055,6 +1092,30 @@ static int imx219_probe(struct i2c_client *client,
 		return -EINVAL;
 	}
 
+	priv->reset_gpio = devm_gpiod_get_optional(dev, "reset", GPIOD_OUT_HIGH);
+	if (IS_ERR(priv->reset_gpio)) {
+		ret = PTR_ERR(priv->reset_gpio);
+		dev_err(&client->dev, "Failed to get reset gpio (%d)\n", ret);
+		return ret;
+	}
+
+	priv->power_gpio = devm_gpiod_get_optional(dev, "power", GPIOD_OUT_HIGH);
+	if (IS_ERR(priv->power_gpio)) {
+		ret = PTR_ERR(priv->power_gpio);
+		dev_err(&client->dev, "Failed to get power gpio (%d)\n", ret);
+		return ret;
+	}
+
+	if (priv->power_gpio) {
+		dev_info(&client->dev, "Set off power-gpio\n");
+		gpiod_set_value_cansleep(priv->power_gpio, 0);
+		msleep(IMX219_PWDN_ACTIVE_DELAY_MS);
+		dev_info(&client->dev, "Set on power-gpio\n");
+		gpiod_set_value_cansleep(priv->power_gpio, 1);
+		msleep(IMX219_PWDN_ACTIVE_DELAY_MS);
+		dev_info(&client->dev, "Ready after power-gpio\n");
+	}
+
 	priv->clk = devm_clk_get(&client->dev, NULL);
 	if (IS_ERR(priv->clk)) {
 		dev_info(&client->dev, "Error %ld getting clock\n",
